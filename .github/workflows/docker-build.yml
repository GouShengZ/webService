name: Docker Build and Push to GitHub Registry

# 触发条件：推送到任何分支
on:
  push:
    branches:
      - '**'  # 匹配所有分支
  pull_request:
    branches:
      - '**'  # 匹配所有分支的PR

env:
  # Docker 镜像名称
  IMAGE_NAME: webservice
  # GitHub Container Registry
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
    # 检出代码
    - name: Checkout code
      uses: actions/checkout@v4
      
    # 设置 Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    # 登录到 GitHub Container Registry
    - name: Login to GitHub Container Registry
      if: github.event_name == 'push'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    # 生成镜像标签和元数据
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          # 为每个分支创建标签
          type=ref,event=branch
          # 为每个PR创建标签
          type=ref,event=pr
          # 为main/master分支创建latest标签
          type=raw,value=latest,enable={{is_default_branch}}
          # 使用commit SHA创建标签
          type=sha,prefix={{branch}}-
          
    # 构建和推送 Docker 镜像
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name == 'push' }}  # 仅在推送事件时推送镜像
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    # 构建摘要
    - name: Build Summary
      run: |
        echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Tags**:" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ github.event_name }}" == "push" ]]; then
          echo "✅ **Image pushed to GitHub Container Registry**" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Registry URL**: https://ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ **Image built but not pushed (PR event)**" >> $GITHUB_STEP_SUMMARY
        fi

  # 安全扫描 (可选)
  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract first image tag
      id: extract-tag
      run: |
        # 从 build job 的输出中提取第一个镜像标签
        TAGS="${{ needs.build.outputs.image-tags }}"
        if [ -z "$TAGS" ]; then
          echo "Error: No image tags found from build job"
          exit 1
        fi
        
        FIRST_TAG=$(echo "$TAGS" | head -n1)
        if [ -z "$FIRST_TAG" ]; then
          echo "Error: Failed to extract first tag"
          exit 1
        fi
        
        echo "image-tag=$FIRST_TAG" >> $GITHUB_OUTPUT
        echo "✅ Scanning image: $FIRST_TAG"
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ steps.extract-tag.outputs.image-tag }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '0'  # 不因为发现漏洞而失败
        
    - name: Check Trivy results file
      run: |
        if [ ! -f "trivy-results.sarif" ]; then
          echo "Error: trivy-results.sarif file not found"
          ls -la
          exit 1
        fi
        echo "✅ Trivy results file created successfully"
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Security Scan Summary
      if: always()
      run: |
        echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Scanned**: ${{ steps.extract-tag.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Scanner**: Trivy" >> $GITHUB_STEP_SUMMARY
        echo "- **Scan Date**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "trivy-results.sarif" ]; then
          echo "✅ **Scan completed successfully**" >> $GITHUB_STEP_SUMMARY
          echo "📄 **Results uploaded to GitHub Security tab**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Scan failed - results file not found**" >> $GITHUB_STEP_SUMMARY
        fi
